airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cluster)
library(factoextra)
library(ggdendro)
library(stats)
library(dplyr)
library(ggplot2)
library(tidyr)
library(cluster)
library(factoextra)
library(ggdendro)
library(stats)
df_madrid <- airbnb %>%
select(City, Room.Type, Neighbourhood, Accommodates, Bathrooms, Bedrooms, Beds,
Price, Square.Feet, Guests.Included, Extra.People, Review.Scores.Rating,
Latitude, Longitude) %>%
filter(City == "Madrid" & Room.Type == "Entire home/apt" & Neighbourhood != "") %>%
select(-c(City, Room.Type))
df_madrid <- airbnb %>%
select(City, Room.Type, Neighbourhood, Accommodates, Bathrooms, Bedrooms, Beds,
Price, Square.Feet, Guests.Included, Extra.People, Review.Scores.Rating,
Latitude, Longitude) %>%
filter(City == "Madrid" & Room.Type == "Entire home/apt" & Neighbourhood != "") %>%
select(-c(City, Room.Type))
df_madrid <- df_madrid %>% mutate(Square.Meters = Square.Feet * 0.092903)
missing_sq_meters <- sum(is.na(df_madrid$Square.Meters)) / nrow(df_madrid) * 100
cat("Porcentaje:", missing_sq_meters, "%\n")
zero_sq_meters <- sum(df_madrid$Square.Meters == 0, na.rm = TRUE) / sum(!is.na(df_madrid$Square.Meters)) * 100
cat("Porcentaje:", zero_sq_meters, "%\n")
df_madrid$Square.Meters[df_madrid$Square.Meters == 0] <- NA
hist(df_madrid$Square.Meters, breaks = 30, main = "Distribución de Metros Cuadrados", xlab = "Metros Cuadrados")
df_madrid <- df_madrid %>% mutate(Square.Meters = ifelse(Square.Meters < 20, NA, Square.Meters))
neighbourhoods_delete <- df_madrid %>%
group_by(Neighbourhood) %>%
summarise(todos_na = all(is.na(Square.Meters))) %>%
filter(todos_na) %>%
pull(Neighbourhood)
#print(neighbourhoods_delete)
df_madrid <- df_madrid %>% filter(!(Neighbourhood %in% neighbourhoods_delete))
# Utilizamos un Análisis de Varianza
anova_test <- aov(Square.Meters ~ Neighbourhood, data = df_madrid)
summary(anova_test)
# p-valor = 2.21e-06 = 2.21 × 10⁻⁶ = 0.00000221, lo cual es mucho menor que el umbral 0.005 y podemos concluir que hay diferencias significativas entre vecindarios
tukey_result <- TukeyHSD(anova_test)
#print(tukey_result)
#plot(tukey_result, las = 1, col = "blue")
neighbourhood_1 <- "Jerónimos"
neighbourhood_2 <- "Acacias"
tukey_neighbourhood <- paste0(neighbourhood_1, "-", neighbourhood_2)
cat(neighbourhood_1, "-", neighbourhood_2, ":", tukey_result$Neighbourhood[tukey_neighbourhood, "p adj"], "\n")
#aggregate(Square.Meters ~ Neighbourhood, data = df_madrid, mean)
media_A <- mean(df_madrid$Square.Meters[df_madrid$Neighbourhood == neighbourhood_1], na.rm = TRUE)
media_B <- mean(df_madrid$Square.Meters[df_madrid$Neighbourhood == neighbourhood_2], na.rm = TRUE)
diff <- media_A - media_B
cat("La diferencia entre", neighbourhood_1, "y", neighbourhood_2, "es", diff, "m2\n")
#t.test(df_madrid$Square.Meters[df_madrid$Neighbourhood == neighbourhood_1], df_madrid$Square.Meters[df_madrid$Neighbourhood == neighbourhood_2], var.equal = TRUE)
tukey_matrix <- tukey_result$Neighbourhood[, "p adj"]
neighs <- unique(df_madrid$Neighbourhood)
n_neighbourhood <- length(neighs)
dist_matrix <- matrix(NA, nrow = n_neighbourhood, ncol = n_neighbourhood)
rownames(dist_matrix) <- neighs
colnames(dist_matrix) <- neighs
combinations <- combn(neighs, 2, simplify = FALSE)
for (i in seq_along(combinations)) {
neigh1 <- combinations[[i]][1]
neigh2 <- combinations[[i]][2]
dist_matrix[neigh1, neigh2] <- tukey_matrix[i]
dist_matrix[neigh2, neigh1] <- tukey_matrix[i]
}
# Convertimos los p-valores en distancias: 1 - p_valor
dist_matrix <- 1 - dist_matrix
dist_obj <- as.dist(dist_matrix)
#print(dist_obj)
# Realizar clustering
hc <- hclust(dist_obj, method = "ward.D2")
plot(hc, main = "Dendrograma de Barrios por Metros Cuadrados", xlab = "Barrios", sub = "")
# Cortar en Height = 1 separa claramente los barrios con diferencias notables en metros cuadrados.
n_height <- 1
n_clusters <- 4
plot(hc, main = "Dendrograma de Barrios por Metros Cuadrados", xlab = "Barrios")
rect.hclust(hc, h = n_height, border = "blue")  # Cortar en altura 1
rect.hclust(hc, k = n_clusters, border = "red")  # 4 Clusters
neighb_clusters <- cutree(hc, k = n_clusters)
df_clusters <- data.frame(Neighbourhood = names(neighb_clusters), neighb_id = neighb_clusters)
df_madrid <- merge(df_madrid, df_clusters, by = "Neighbourhood", all.x = TRUE)
table(df_madrid$neighb_id)
set.seed(123)
train_indices <- sample(1:nrow(df_madrid), size = 0.7 * nrow(df_madrid))
df_train <- df_madrid[train_indices, ]
df_test <- df_madrid[-train_indices, ]
model <- lm(Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Beds + Price + Guests.Included + Review.Scores.Rating + neighb_id, data=df_train)
summary(model)
valid_rows <- !is.na(df_test$Square.Meters) & !is.na(predictions)
summary(model)
valid_rows <- !is.na(df_test$Square.Meters)
mse <- mean((df_test$Square.Meters[valid_rows])^2)
rmse <- sqrt(mse)
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
par(mfrow=c(2,2))
plot(model)
summary(model)
predictions <- predict(model, newdata = df_test)
valid_rows <- !is.na(df_test$Square.Meters) & !is.na(predictions)
mse <- mean((df_test$Square.Meters[valid_rows] - predictions[valid_rows])^2)
rmse <- sqrt(mse)
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
par(mfrow=c(2,2))
plot(model)
summary(model)
predictions <- predict(model, newdata = df_test)
valid_rows <- !is.na(df_test$Square.Meters) & !is.na(predictions)
mse <- mean((df_test$Square.Meters[valid_rows] - predictions[valid_rows])^2)
rmse <- sqrt(mse)
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
par(mfrow=c(2,2))
plot(model)
# Predicción para el apartamento de Sol con 3 habitaciones
new_apartment <- data.frame(Accommodates=6, Bathrooms=1, Bedrooms=3, Beds=3, Price=80, Guests.Included=6, Review.Scores.Rating=80, neighb_id=1)
predicted_m2 <- predict(model, newdata = new_apartment)
cat("Predicción con 3 habitaciones:", predicted_m2, "m2\n")
# Predicción para el apartamento de Sol con 5 habitaciones
new_apartment <- data.frame(Accommodates=6, Bathrooms=1, Bedrooms=5, Beds=3, Price=80, Guests.Included=6, Review.Scores.Rating=80, neighb_id=1)
predicted_m2 <- predict(model, newdata = new_apartment)
cat("Predicción con 5 habitaciones:", predicted_m2, "m2\n")
print("La conclusión: Por cada habitación adicional se suma 14.07 m²")
df_madrid$Square.Meters[is.na(df_madrid$Square.Meters)] <- predict(model, newdata = df_madrid[is.na(df_madrid$Square.Meters), ])
df_madrid
